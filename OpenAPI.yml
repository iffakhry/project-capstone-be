openapi: '3.0.3'
info:
  title: 'Final Project Alta: Barengin'
  version: '1.0'
  description: 'API Documentation for Barengin'
  contact: 
    name: Barengin Official
    url: https://barengin.site
    email: sahrilmahendra@gmail.com
externalDocs: 
  description: "GitHub Repository of Final Project: Barengin"
  url: https://github.com/project-capstone
servers:
  - url: https://barengin.site
    description: Base URL that will be used for endpoints
tags:
  - name: Authentication
    description: Endpoint for verifying who a user is
  - name: Sign Up
    description: Endpoint for user registration
  - name: Users
    description: Endpoint for perform operations on user
  - name: Products
    description: Endpoint for perform operations on product
  - name: Group Products
    description: Endpoint for perform operations on group product
  - name: Orders
    description: Endpoint for perform operations on order
paths:
####################################
#  AUTHENTICATION
####################################
  /login:
    post:
      tags:
        - Authentication
      summary: Get token for access to account
      requestBody:
        $ref: '#/components/requestBodies/requestBodyLogin'
      responses:
        '200':
          $ref: '#/components/responses/loginSuccess'
        '400':
          $ref: '#/components/responses/loginFailed'
####################################
#  SIGN UP
####################################
  /signup:
    post:
      tags:
        - Sign Up
      summary: Create a new account for customer
      requestBody:
        $ref: '#/components/requestBodies/requestBodyUser'
      responses:
        '200':
          $ref: '#/components/responses/successOperationNonData'
        '400':
          $ref: '#/components/responses/createUserFailed'
####################################
#  USERS
####################################
  /users:
    get:
      tags:
        - Users
      summary: Get all customer's data for admin
      #security:
       # - JWTAuth: []
      responses:
        '200':
          $ref: '#/components/responses/getAllUsersSuccess'
        '400':
          $ref: '#/components/responses/getAllDataFailed'
  /users/{id}:
    get:
      tags:
        - Users
      summary: Get customer's data by id
      #security:
       # - JWTAuth: []
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          $ref: '#/components/responses/getUserSuccess'
        '400':
          $ref: '#/components/responses/getDataByIdFailed'
  /jwt/users/{id}:
    put:
      tags:
        - Users
      summary: Update customer's data by id
      security:
        - JWTAuth: []
      parameters:
        - $ref: '#/components/parameters/idParam'
      requestBody:
        $ref: '#/components/requestBodies/requestBodyUserUpdate'
      responses:
        '200':
          $ref: '#/components/responses/successOperationNonData'
        '400':
          $ref: '#/components/responses/updateUserFailed'
    delete:
      tags:
        - Users
      summary: Delete customer's data by id
      security:
        - JWTAuth: []
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          $ref: '#/components/responses/successOperationNonData'
        '400':
          $ref: '#/components/responses/deleteDataByIdFailed'
####################################
#  PRODUCTS
####################################
  /products:
    get:
      tags:
      - Products
      summary: Get all products
      responses:
        '200':
          $ref: '#/components/responses/getAllProductsSuccess'
        '400':
          $ref: '#/components/responses/getAllDataFailed'
  /products/{id}:
    get:
      tags:
        - Products
      summary: Get product by id
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          $ref: '#/components/responses/getProductSuccess'
        '400':
          $ref: '#/components/responses/getDataByIdFailed'
  /jwt/products:
    post:
      tags:
        - Products
      summary: Create a new product for admin
      security:
        - JWTAuth: []
      requestBody:
        $ref: '#/components/requestBodies/requestBodyProduct'
      responses:
        '200':
          $ref: '#/components/responses/successOperationNonData'
        '400':
          $ref: '#/components/responses/createProductFailed'
        '500':
          $ref: '#/components/responses/productServerFailed'
  /jwt/products/{id}:
    put:
      tags:
        - Products
      summary: Update product by id for admin
      security:
        - JWTAuth: []
      parameters:
        - $ref: '#/components/parameters/idParam'
      requestBody:
        $ref: '#/components/requestBodies/requestBodyProductUpdate'
      responses:
        '200':
          $ref: '#/components/responses/successOperationNonData'
        '400':
          $ref: '#/components/responses/updateProductFailed'
        '500':
          $ref: '#/components/responses/productServerFailed'
    delete:
      tags:
      - Products
      summary: Delete product by id for admin
      security:
        - JWTAuth: []
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          $ref: '#/components/responses/successOperationNonData'
        '400':
          $ref: '#/components/responses/deleteDataByIdFailed'
####################################
#  GROUP PRODUCTS
####################################
  /products/group:
    get:
      tags:
        - Group Products
      summary: Get all Group Products
      responses:
        '200':
          $ref: '#/components/responses/getAllGroupProductsSuccess'
        '400':
          $ref: '#/components/responses/getAllDataFailed'
  /products/group/{id}:
    get:
      tags:
        - Group Products
      summary: Get Group Products by id
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          $ref: '#/components/responses/getGroupProductSuccess'
        '400':
          $ref: '#/components/responses/getDataByIdFailed'
  /products/group/status/{status}:
    get:
      tags:
        - Group Products
      summary: Get All Group Products by available
      parameters:
        - $ref: '#/components/parameters/availParam'
      responses:
        '200':
          $ref: '#/components/responses/getAllGroupProductsAvailableSuccess'
        '400':
          $ref: '#/components/responses/getAllGroupProductsAvailableFailed'
  /jwt/products/group:
    post:
      tags:
      - Group Products
      summary: Create a new group product
      security:
        - JWTAuth: []
      requestBody:
        $ref: '#/components/requestBodies/requestBodyGroupProduct'
      responses:
        '200':
          $ref: '#/components/responses/successOperationNonData'
        '400':
          $ref: '#/components/responses/createGroupProductFailed'
####################################
#  ORDERS
####################################
  /jwt/orders:
    post:
      tags:
      - Orders
      summary: Create a new order
      security:
        - JWTAuth: []
      requestBody:
        $ref: '#/components/requestBodies/requestBodyOrder'
      responses:
        '200':
          $ref: '#/components/responses/successOperationNonData'
        '400':
          $ref: '#/components/responses/createOrderFailed'
  /jwt/orders/users/{id}:
    get:
      tags:
      - Orders
      summary: Get all orders by user's id
      parameters:
        - $ref: '#/components/parameters/idParam'
      security:
        - JWTAuth: []
      responses:
        '200':
          $ref: '#/components/responses/getAllUserOrdersSuccess'
        '400':
          $ref: '#/components/responses/getManyOrdersFailed'
  /jwt/orders/group/{id}:
    get:
      tags:
        - Orders
      summary: Get all orders by id_group_product
      parameters:
        - $ref: '#/components/parameters/idParam'
      security:
        - JWTAuth: []
      responses:
        '200':
          $ref: '#/components/responses/getAllGroupOrdersSuccess'
        '400':
          $ref: '#/components/responses/getManyOrdersFailed'
  /jwt/orders/{id}:
    get:
      tags:
        - Orders
      summary: Get order by id
      parameters:
        - $ref: '#/components/parameters/idParam'
      security:
        - JWTAuth: []
      responses:
        '200':
          $ref: '#/components/responses/getOrderSuccess'
        '400':
          $ref: '#/components/responses/getOrderFailed'
    put:
      tags:
        - Orders
      summary: Update order by id
      security:
        - JWTAuth: []
      parameters:
        - $ref: '#/components/parameters/idParam'
      requestBody:
        $ref: '#/components/requestBodies/requestBodyOrderUpdate'
      responses:
        '200':
          $ref: '#/components/responses/successOperationNonData'
        '400':
          $ref: '#/components/responses/updateOrderFailed'
    delete:
      tags:
      - Orders
      summary: Delete order by id
      security:
        - JWTAuth: []
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          $ref: '#/components/responses/successOperationNonData'
        '400':
          $ref: '#/components/responses/deleteOrderFailed'
####################################
#  COMPONENTS
####################################
components:
  schemas:
    requestDataLogin:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    requestDataUser:
      type: object
      required:
        - name
        - email
        - password
        - phone
      properties:
        name:
          type: string
          minLength: 1
          description: only contain alphanumeric and starts not with space
        email:
          type: string
          format: email
          description: inputted email must be unique
        password:
          type: string
          minLength: 6
        phone:
          type: string
          format: e164
          description: inputted phone number must be unique
    requestDataProduct:
      type: object
      required:
        - name_product
        - detail_product
        - price
        - limit
        - photo
      properties:
        name_product:
          type: string
          description: "minLength: 1"
        detail_product:
          type: string
          description: "minLength: 1"
        price:
          type: integer
          description: "minimum value: 1"
        limit:
          type: integer
          description: "minimum value: 1"
        photo:
          type: string
          format: binary
          description: "allowed file extension: jpg, png, & jpeg"
    requestDataGroupProduct:
      type: object
      properties:
        products_id:
          type: integer
    requestDataOrder:
      type: object
      properties:
        credit_card:
          type: object
          properties:
            typ:
              type: string
            name:
              type: string
            number:
              type: string
            cvv:
              type: integer
            month:
              type: integer
            year:
              type: integer
    requestDataOrderUpdate:
      type: object
      properties:
        credential:
          type: string
    responseLoginWithData:
      type: object
      properties:
        Code:
          type: integer
        Message:
          type: string
        Data:
          type: object
          properties:
            ID:
              type: integer
            Name:
              type: string
            Token:
              type: string
            Role: 
              type: string
    responseUserWithData:
      type: object
      properties:
        Code:
          type: integer
        Message:
          type: string
        Data:
          type: object
          properties:
            ID:
              type: integer
            Name:
              type: string
            Email:
              type: string
            Phone:
              type: string
    responseUserWithDataArray:
      type: object
      properties:
        Code:
          type: integer  
        Message:
          type: string
        Data:
          type: array
          items:
            type: object
            properties:
              ID:
                type: integer
              Name:
                type: string
              Email:
                type: string
              Phone:
                type: string    
    responseProductWithData:
      type: object
      properties:
        Code:
          type: integer
        Message:
          type: string
        Data:
          type: object
          properties:
            ID:
              type: integer
            NameProduct:
              type: string
            DetailProduct:
              type: string
            Price:
              type: integer
            Limit:
              type: integer
            Photo:
              type: string
              format: binary
            Url: 
              type: string
    responseProductWithDataArray:
      type: object
      properties:
        Code:
          type: integer
        Message:
          type: string
        Data:
          type: array
          items:
            type: object
            properties:
              ID:
                type: integer
              NameProduct:
                type: string
              DetailProduct:
                type: string
              Price:
                type: integer
              Limit:
                type: integer
              Photo:
                type: string
                format: binary
              Url: 
                type: string
    responseGroupProductWithData:
      type: object
      properties:
        Code:
          type: integer
        Message:
          type: string
        Data:
          type: object
          properties:
            ID:
              type: integer
            ProductsID:
              type: integer
            NameGroupProduct:
              type: string
            Limit:
              type: integer
            CapacityGroupProduct:
              type: integer
            Price:
              type: integer
            AdminFee:
              type: integer
            TotalPrice:
              type: integer 
            DurationGroup:
              type: string
            Name_Product: 
              type: string
            Status: 
              type: string
            Url:
              type: string
    responseGroupProductWithDataArray:
        type: object
        properties:
          Code:
            type: integer
          Message:
            type: string
          Data:
            type: array
            items:
              type: object
              properties:
                ID:
                  type: integer
                ProductsID:
                  type: integer
                NameGroupProduct:
                  type: string
                Limit:
                  type: integer
                CapacityGroupProduct:
                  type: integer
                Price:
                  type: integer
                AdminFee:
                  type: integer
                TotalPrice:
                  type: integer 
                DurationGroup:
                  type: string
                Name_Product: 
                  type: string
                Status: 
                  type: string
                Url:
                  type: string  
    responseOrderWithData:
      type: object
      properties:
        Code:
          type: integer
        Message:
          type: string
        Data:
          type: object
          properties:
            ID:
              type: integer
            UsersID:
              type: integer
            GroupProductID:
              type: integer
            NameProduct:
              type: string
            Price_Order:
              type: integer
            Credential:
              type: string
    responseOrderWithDataArray:
      type: object
      properties:
        Code:
          type: integer
        Message:
          type: string
        Data:
          type: array 
          items:
            type: object
            properties:
              ID:
                type: integer
              UsersID:
                type: integer
              GroupProductID:
                type: integer
              NameProduct:
                type: string
              Price_Order:
                type: integer
              Credential:
                type: string
    responseNonData: 
      type: object
      properties:
        Code:
          type: integer
        Message:
          type: string 
  parameters:
    idParam:
      name: id
      in: path
      required: true
      schema:
        type: integer
        example: 1
    availParam:
      name: status
      in: path
      required: true
      schema:
        type: string
        example: available
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "use Token"  
  requestBodies:
    requestBodyLogin:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/requestDataLogin'
          examples:
            user1:
              value:
                email: admin@admin.com
                password: admin123
            user2:
              value:
                email: s@g.sb
                password: asd!@#1
            user3:
              value:
                email: nurilhuda7337@gmail.com
                password: "12345678"
        multipart/form-data:
          schema:
            $ref: '#/components/schemas/requestDataLogin'        
    requestBodyUser:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/requestDataUser'
          examples:
            newUser1:
              value:
                name: Nuril Huda
                email: nurilhuda7337@gmail.com
                password: "12345678"
                phone: "+6281234567890"
            newUser2:
              value:
                name: Supriadi
                email: s@g.sb
                password: asd!@#12
                phone: "+67712345"
            newUser3:
              value:
                name: Sahril Mahendra
                email: sahrilmahendra@gmail.com
                password: qwertyui
                phone: "+62899999999999"
        multipart/form-data:
          schema:
            $ref: '#/components/schemas/requestDataUser'
    requestBodyUserUpdate:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/requestDataUser'
          examples:
            newData1:
              value:
                name: Supriadi Baru
                email: new.s@yahoo.co.id
                password: newpass
                phone: "+628966066096"
        multipart/form-data:
          schema:
            $ref: '#/components/schemas/requestDataUser'
    requestBodyProduct:
      required: true
      content:
        multipart/form-data:
          schema:
            $ref: '#/components/schemas/requestDataProduct'
    requestBodyProductUpdate:
      required: true
      content:
        multipart/form-data:
          schema:
            $ref: '#/components/schemas/requestDataProduct'
    requestBodyGroupProduct:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/requestDataGroupProduct'
          examples:
            group1:
              value:
                products_id: 2
            group2:
              value:
                products_id: 3
        multipart/form-data:
          schema:
            $ref: '#/components/schemas/requestDataGroupProduct'
    requestBodyOrder: 
      required: true
      content:
        application/json:
          schema:  
            $ref: '#/components/schemas/requestDataOrder'
          example:
            credit_card:
              typ: Visa
              name: Supriadi
              number: 1234-1234-1234-1234
              cvv: 234
              month: 12
              year: 21
    requestBodyOrderUpdate: 
      required: true
      content:
        application/json:
          schema:  
            $ref: '#/components/schemas/requestDataOrderUpdate'
          example:
            credential: "email: subs.netflix@mail.com, password: qwertyui"
  responses:
    loginSuccess:
      description: Success Response Data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseLoginWithData'
          examples:
            Admin:
              value:
                Code: 200
                Message: Login Success
                Data: {
                  ID: 1,
                  Name: Admin,
                  Token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.emV2MzgxOeyJhdXRob3JpTUwMDksInVzZXJJZCI6MX0kIjp0cnVlLCJleHAiOjE.aDGmCTqYbV7hJ02lOpoQ0gso_gffYqClvhaNZZdbe7F,
                  Role: admin
                }
            Customer:
              value:
                Code: 200
                Message: Login Success
                Data: {
                  ID: 3,
                  Name: Supriadi,
                  Token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJleHAiOjE2MzgxOTUwMDksInVzZXJJZCI6MX0.0gso_gffYqaDGmCTqYClvhaNZZdbe7FbV7hJ02lOpoQ,
                  Role: customer
                }
    loginFailed:
      description: Bad Request Response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseNonData'
          example:
            Code: 400 
            Message: Email or Password Incorrect
    successOperationNonData:
      description: Success Response Non Data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseNonData'
          example:
            Code: 200
            Message: Success Operation
    createUserFailed:
      description: Bad Request Response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseNonData'
          examples:
            Invalid Name:
              $ref: '#/components/examples/invalidName'
            Invalid Email:
              $ref: '#/components/examples/invalidEmail'
            Invalid Password:
              $ref: '#/components/examples/invalidPassword'
            Password Must Consist Of:
              $ref: '#/components/examples/passwordMustConsistOf'
            Invalid Telephone Number:
              $ref: '#/components/examples/invalidTelephoneNumber'
            Email or Telephone Number Already Exist:
              $ref: '#/components/examples/emailOrTelephoneNumberAlreadyExist'
    getAllUsersSuccess:
      description: Success Response Data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseUserWithDataArray'
          example:
            Code: 200
            Message: Success Operation
            Data: [
              {
                ID: 2,
                Name: Nuril Huda,
                Email: nurilhuda7337@gmail.com,
                Phone: "+6281234567890"
              },
              {
                ID: 3,
                Name: Supriadi,
                Email: s@g.sb,
                Phone: "+67712345890"
              },
              {
                ID: 4,
                Name: Sahril Mahendra,
                Email: sahrilmahendra@gmail.com,
                Phone: "+62899999999999"
              }
            ]
    getAllDataFailed:
      description: Bad Request Response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseNonData'
          examples:
            Data Not Found:
              $ref: '#/components/examples/dataNotFound'
            Bad Request:
              $ref: '#/components/examples/badRequest'
    getUserSuccess:
      description: Success Response Data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseUserWithData'
          example:
            Code: 200
            Message: Success Operation
            Data: {
              ID: 2,
              Name: Nuril Huda,
              Email: nurilhuda7337@gmail.com,
              Phone: "+6281234567890"
            }
    getDataByIdFailed:
      description: Bad Request Response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseNonData'
          examples:
            Invalid Id:
              $ref: '#/components/examples/invalidId'
            Data Not Found:
              $ref: '#/components/examples/dataNotFound'
            Bad Request:
              $ref: '#/components/examples/badRequest'
    updateUserFailed:
      description: Bad Request Response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseNonData'
          examples:
            Invalid Id:
              $ref: '#/components/examples/invalidId'
            Data Not Found:
              $ref: '#/components/examples/dataNotFound'
            Access Forbidden:
                $ref: '#/components/examples/accessForbidden'
            Invalid Name:
              $ref: '#/components/examples/invalidName'
            Invalid Email:
              $ref: '#/components/examples/invalidEmail'
            Invalid Password:
              $ref: '#/components/examples/invalidPassword'
            Password Must Consist Of:
              $ref: '#/components/examples/passwordMustConsistOf'
            Invalid Telephone Number:
              $ref: '#/components/examples/invalidTelephoneNumber'
            Email or Telephone Number Already Exist:
              $ref: '#/components/examples/emailOrTelephoneNumberAlreadyExist'
    deleteDataByIdFailed:
      description: Bad Request Response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseNonData'
          examples:
            Invalid Id:
              $ref: '#/components/examples/invalidId'
            Data Not Found:
              $ref: '#/components/examples/dataNotFound'
            Access Forbidden:
                $ref: '#/components/examples/accessForbidden'
    createProductFailed:
      description: Bad Request Response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseNonData'
          examples:
            File Extension Not Allowed:
              $ref: '#/components/examples/fileExtensionNotAllowed'
            Illegal File:
              $ref: '#/components/examples/illegalFile'
            Size File Too Big:
              $ref: '#/components/examples/sizeFileTooBig'
            Access Forbidden: 
              $ref: '#/components/examples/accessForbidden'
            Bad Request:
              $ref: '#/components/examples/badRequest'
    productServerFailed:
      description: Internal Server Error Response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseNonData'
          examples:
            Can't Connect to Server:
              $ref: '#/components/examples/cantConnecttoServer'
            Failed to Upload File:
              $ref: '#/components/examples/failedtoUploadFile'
    getAllProductsSuccess:
      description: Success Response Data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseProductWithDataArray'
          example:
            Code: 200
            Message: Success Operation
            Data: [
              { 
                ID: 1,
                NameProduct: Netflix,
                DetailProduct: Langganan Netflix untuk 1 bulan,
                Price: 200000,
                Limit: 4,
                Photo: logo-netflix-upload-file-2021-12-12T07:19:15.jpeg,
                Url: https://storage.googleapis.com/sahril-bucket/netflix-try-upload-file-2021-12-12T07:19:15.jpeg
              },
              { 
                ID: 2,
                NameProduct: Spotify,
                DetailProduct: Langganan Spotify untuk 1 bulan,
                Price: 100000,
                Limit: 5,
                Photo: logo-spotify-upload-file-2021-12-12T12:12:12.jpeg,
                Url: https://storage.googleapis.com/sahril-bucket/spotify-try-upload-file-2021-12-12T07:19:15.jpeg
              }
            ]
    getProductSuccess:
      description: Success Response Data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseProductWithData'
          example:
            Code: 200
            Message: Success Operation
            Data: { 
              ID: 3,
              NameProduct: Gramedia,
              DetailProduct: Langganan Gramedia untuk 1 bulan,
              Price: 150000,
              Limit: 4,
              Photo: logo-netflix-upload-file-2021-12-12T07:19:15.jpeg,
              Url: https://storage.googleapis.com/sahril-bucket/netflix-try-upload-file-2021-12-12T07:19:15.jpeg
            }
    updateProductFailed:
      description: Bad Request Response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseNonData'
          examples:
            Invalid Id:
              $ref: '#/components/examples/invalidId'
            Data Not Found:
              $ref: '#/components/examples/dataNotFound'
            Access Forbidden:
              $ref: '#/components/examples/accessForbidden'
            Bad Request:
              $ref: '#/components/examples/badRequest'
            File Extension Not Allowed:
              $ref: '#/components/examples/fileExtensionNotAllowed'
            Illegal File:
              $ref: '#/components/examples/illegalFile'
            Size File Too Big:
              $ref: '#/components/examples/sizeFileTooBig'
    createGroupProductFailed:
      description: Bad Request Response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseNonData'
          examples:
            Access Forbidden:
              $ref: '#/components/examples/accessForbidden'
            Bad Request:
              $ref: '#/components/examples/badRequest'
            Id Product Not Found: 
              $ref: '#/components/examples/idProductNotFound'
    getAllGroupProductsSuccess:
      description: Success Response Data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseGroupProductWithDataArray'
          example:
            Code: 200
            Message: Success Operation
            Data: [
              { 
                ID: 1,
                ProducstID: 3, 
                NameGroupProduct: Youtube-Music-1,
                Limit: 6,
                CapacityGroupProduct: 1,
                Price: 300000,
                AdminFee: 5000,
                TotalPrice: 305000,
                DurationGroup: 12-26-2021,
                Name_Product: Youtube-Music,
                Status: Available,
                Url: https://storage.googleapis.com/barengin-bucket/Youtube-Music-2021-12-13T10:06:45.jpg
              },
              { 
                ID: 2,
                ProducstID: 3, 
                NameGroupProduct: Youtube-Music-1,
                Limit: 6,
                CapacityGroupProduct: 1,
                Price: 300000,
                AdminFee: 5000,
                TotalPrice: 305000,
                DurationGroup: 12-26-2021,
                Name_Product: Youtube-Music,
                Status: Available,
                Url: https://storage.googleapis.com/barengin-bucket/Youtube-Music-2021-12-13T10:06:45.jpg
              }
            ]
    getAllGroupProductsAvailableFailed:
      description: Bad Request Response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseNonData'
          examples:
            Invalid Param:
              $ref: '#/components/examples/invalidParam'
            Data Not Found:
              $ref: '#/components/examples/dataNotFound'
            Bad Request:
              $ref: '#/components/examples/badRequest'
    getAllGroupProductsAvailableSuccess:
      description: Success Response Data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseGroupProductWithDataArray'
          example:
            Code: 200
            Message: Success Operation
            Data: [
              { 
                ID: 1,
                ProducstID: 3, 
                NameGroupProduct: Youtube-Music-1,
                Limit: 6,
                CapacityGroupProduct: 1,
                Price: 300000,
                AdminFee: 5000,
                TotalPrice: 305000,
                DurationGroup: 12-26-2021,
                Name_Product: Youtube-Music,
                Status: Available,
                Url: https://storage.googleapis.com/barengin-bucket/Youtube-Music-2021-12-13T10:06:45.jpg
              },
              { 
                ID: 2,
                ProducstID: 3, 
                NameGroupProduct: Youtube-Music-1,
                Limit: 6,
                CapacityGroupProduct: 1,
                Price: 300000,
                AdminFee: 5000,
                TotalPrice: 305000,
                DurationGroup: 12-26-2021,
                Name_Product: Youtube-Music,
                Status: Available,
                Url: https://storage.googleapis.com/barengin-bucket/Youtube-Music-2021-12-13T10:06:45.jpg
              }
            ]
    getGroupProductSuccess:
      description: Success Response Data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseGroupProductWithData'
          example:
            Code: 200
            Message: Success Operation
            Data: { 
                ID: 1,
                ProducstID: 3, 
                NameGroupProduct: Youtube-Music-1,
                Limit: 6,
                CapacityGroupProduct: 1,
                Price: 300000,
                AdminFee: 5000,
                TotalPrice: 305000,
                DurationGroup: 12-26-2021,
                Name_Product: Youtube-Music,
                Status: Available,
                Url: https://storage.googleapis.com/barengin-bucket/Youtube-Music-2021-12-13T10:06:45.jpg
              }
    createOrderFailed:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseNonData'
          examples:
            Bad Request:
              $ref: '#/components/examples/badRequest'
    getAllUserOrdersSuccess:
      description: Success Operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseOrderWithDataArray'
          example:
            Code: 200
            Message: Success Operation
            Data: [
              {
                ID: 1,
                UsersID: 2,
                GroupProductID: 1,
                NameProduct: Spotify,
                PriceOrder: 26500,
                Credential: "email: subs.spotify@mail.com, password: spotify123"
              },
              {
                ID: 2,
                UsersID: 2,
                GroupProductID: 2,
                NameProduct: Netflix,
                PriceOrder: 56500,
                Credential: "email: subs.netflix@mail.com, password: netflix123"
              }            
            ]
    getManyOrdersFailed:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseNonData'
          examples:
            Invalid Id:
              $ref: '#/components/examples/invalidId'
            Data Not Found:
              $ref: '#/components/examples/dataNotFound'
            Access Forbidden:
              $ref: '#/components/examples/accessForbidden'
    getAllGroupOrdersSuccess:
      description: Success Operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseOrderWithDataArray'
          example:
            Code: 200
            Message: Success Operation
            Data: [
              {
                ID: 1,
                UsersID: 2,
                GroupProductID: 1,
                NameProduct: Spotify,
                PriceOrder: 26500,
                Credential: "email: subs.spotify@mail.com, password: spotify123"
              },
              {
                ID: 4,
                UsersID: 5,
                GroupProductID: 1,
                NameProduct: Spotify,
                PriceOrder: 26500,
                Credential: "email: subs.spotify@mail.com, password: spotify123"
              }            
            ]
    getOrderSuccess:
      description: Success Operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseOrderWithData'
          example:
            Code: 200
            Message: Success Operation
            Data: {
              ID: 1,
              UsersID: 2,
              GroupProductID: 1,
              NameProduct: Spotify,
              PriceOrder: 26500,
              Credential: "email: subs.spotify@mail.com, password: spotify123"
            }
    getOrderFailed:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseNonData'
          examples:
            Invalid Id:
              $ref: '#/components/examples/invalidId'
            Data Not Found:
              $ref: '#/components/examples/dataNotFound'
            Bad Request:
              $ref: '#/components/examples/badRequest'
    updateOrderFailed:
      description: Bad Request Response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseNonData'
          examples:
            Invalid Id:
              $ref: '#/components/examples/invalidId'
            Data Not Found:
              $ref: '#/components/examples/dataNotFound'
            Access Forbidden:
              $ref: '#/components/examples/accessForbidden'
            Bad Request:
              $ref: '#/components/examples/badRequest'
    deleteOrderFailed:
      description: Bad Request Response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseNonData'
          examples:
            Invalid Id:
              $ref: '#/components/examples/invalidId'
            Data Not Found:
              $ref: '#/components/examples/dataNotFound'
            Access Forbidden:
                $ref: '#/components/examples/accessForbidden'
  examples:
    accessForbidden:
      value:
        Code: 400
        Message: Access Forbidden                
    badRequest:
      value:
        Code: 400
        Message: Bad Request
    cantConnecttoServer:
      value:
        Code: 500
        Message: Can't Connect to server
    dataisAvailable:
      value:
        Code: 400
        Message: Data is Available
    dataNotFound:
      value:
        Code: 400
        Message: Data Not Found
    emailOrTelephoneNumberAlreadyExist:
      value: 
        Code: 400
        Message: Email or Telephone Number Already Exist
    failedtoUploadFile:
      value:
        Code: 500
        Message: Failed to Upload File
    fileExtensionNotAllowed:
      value:
        Code: 400
        Message: File Extension Not Allowed
    idProductNotFound:
      value:
        Code: 400
        Message: Id Product Not Found
    illegalFile:
      value:
        Code: 400
        Message: Illegal File
    invalidEmail:
      value:
        Code: 400
        Message: Invalid Email
    invalidId:
      value:
        Code: 400
        Message: Invalid Id
    invalidName:
      value:
        Code: 400
        Message: Invalid Name
    invalidParam:
      value:
        Code: 400
        Message: Invalid Parameter
    invalidPassword:
      value:
        Code: 400
        Message: Invalid Password
    invalidTelephoneNumber:
      value:
        Code: 400
        Message: Invalid Telephone Number
    notAvailable:
      value:
        Code: 400
        Message: Not Available
    passwordMustConsistOf:
      value:
        Code: 400
        Message: Password must consist of 6 characters or more
    sizeFileTooBig:
      value:
        Code: 400
        Message: Size File Too Big
    