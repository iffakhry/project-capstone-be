openapi: '3.0.3'
info:
  title: 'Final Project Alta: Barengin'
  version: '1.0'
  description: 'API Documentation for Barengin'
  contact: 
    name: Barengin Official
    url: https://barengin.site
    email: sahrilmahendra@gmail.com
externalDocs: 
  description: "GitHub Repository of Final Project: Barengin"
  url: https://github.com/project-capstone
servers:
  - url: https://barengin.site
    description: Base URL that will be used for endpoints
tags:
  - name: Authentication
    description: Endpoint for verifying who a user is
  - name: Sign Up
    description: Endpoint for user registration
  - name: Users
    description: Endpoint for perform operations on user
  - name: Products
    description: Endpoint for perform operations on product
  - name: Group Products
    description: Endpoint for perform operations on group product
  - name: Orders
    description: Endpoint for perform operations on order
paths:
####################################
#  AUTHENTICATION
####################################
  /login:
    post:
      tags:
        - Authentication
      summary: Get token for access to account
      requestBody:
        $ref: '#/components/requestBodies/requestBodyLogin'
      responses:
        '200':
          $ref: '#/components/responses/loginSuccess'
        '400':
          $ref: '#/components/responses/loginFailed'
####################################
#  SIGN UP
####################################
  /signup:
    post:
      tags:
        - Sign Up
      summary: Create a new account for customer
      requestBody:
        $ref: '#/components/requestBodies/requestBodyUser'
      responses:
        '200':
          $ref: '#/components/responses/successOperationNonData'
        '400':
          $ref: '#/components/responses/createUserFailed'
####################################
#  USERS
####################################
  /users:
    get:
      tags:
        - Users
      summary: Get all customer's data for admin
      #security:
       # - JWTAuth: []
      responses:
        '200':
          $ref: '#/components/responses/getAllUsersSuccess'
        '400':
          $ref: '#/components/responses/getAllDataFailed'
  /users/{id}:
    get:
      tags:
        - Users
      summary: Get customer's data by id
      #security:
       # - JWTAuth: []
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          $ref: '#/components/responses/getUserSuccess'
        '400':
          $ref: '#/components/responses/getDataByIdFailed'
  /jwt/users/{id}:
    put:
      tags:
        - Users
      summary: Update customer's data by id
      security:
        - JWTAuth: []
      parameters:
        - $ref: '#/components/parameters/idParam'
      requestBody:
        $ref: '#/components/requestBodies/requestBodyUserUpdate'
      responses:
        '200':
          $ref: '#/components/responses/successOperationNonData'
        '400':
          $ref: '#/components/responses/updateUserFailed'
    delete:
      tags:
        - Users
      summary: Delete customer's data by id
      security:
        - JWTAuth: []
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          $ref: '#/components/responses/successOperationNonData'
        '400':
          $ref: '#/components/responses/deleteDataByIdFailed'
####################################
#  PRODUCTS
####################################
  /products:
    get:
      tags:
      - Products
      summary: Get all products
      responses:
        '200':
          $ref: '#/components/responses/getAllProductsSuccess'
        '400':
          $ref: '#/components/responses/getAllDataFailed'
  /products/{id}:
    get:
      tags:
        - Products
      summary: Get product by id
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          $ref: '#/components/responses/getProductSuccess'
        '400':
          $ref: '#/components/responses/getDataByIdFailed'
  /jwt/products:
    post:
      tags:
        - Products
      summary: Create a new product for admin
      security:
        - JWTAuth: []
      requestBody:
        $ref: '#/components/requestBodies/requestBodyProduct'
      responses:
        '200':
          $ref: '#/components/responses/successOperationNonData'
        '400':
          $ref: '#/components/responses/createProductFailed'
        '500':
          $ref: '#/components/responses/productServerFailed'
  /jwt/products/{id}:
    put:
      tags:
        - Products
      summary: Update product by id for admin
      security:
        - JWTAuth: []
      parameters:
        - $ref: '#/components/parameters/idParam'
      requestBody:
        $ref: '#/components/requestBodies/requestBodyProductUpdate'
      responses:
        '200':
          $ref: '#/components/responses/successOperationNonData'
        '400':
          $ref: '#/components/responses/updateProductFailed'
        '500':
          $ref: '#/components/responses/productServerFailed'
    delete:
      tags:
      - Products
      summary: Delete product by id for admin
      security:
        - JWTAuth: []
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          $ref: '#/components/responses/successOperationNonData'
        '400':
          $ref: '#/components/responses/deleteDataByIdFailed'
####################################
#  GROUP PRODUCTS
####################################
  /products/group:
    get:
      tags:
        - Group Products
      summary: Get all Group Products
      responses:
        '200':
          $ref: '#/components/responses/getAllGroupProductsSuccess'
        '400':
          $ref: '#/components/responses/getAllDataFailed'
  /products/group/{id_group}:
    get:
      tags:
        - Group Products
      summary: Get Group Products by id group product
      parameters:
        - $ref: '#/components/parameters/idGroup'
      responses:
        '200':
          $ref: '#/components/responses/getGroupProductSuccess'
        '400':
          $ref: '#/components/responses/getDataByIdFailed'
  /products/group/products/{id_products}:
    get:
      tags:
        - Group Products
      summary: Get All Group Products by id products
      parameters:
        - $ref: '#/components/parameters/idProducts'
      responses:
        '200':
          $ref: '#/components/responses/getAllGroupProductsSuccess'
        '400':
          $ref: '#/components/responses/getDataByIdFailed'
  /products/group/status/{status}:
    get:
      tags:
        - Group Products
      summary: Get All Group Products by available
      parameters:
        - $ref: '#/components/parameters/statusParam'
      responses:
        '200':
          $ref: '#/components/responses/getAllGroupProductsSuccess'
        '400':
          $ref: '#/components/responses/getAllGroupProductsAvailableFailed'
  /jwt/products/group/{id_products}:
    post:
      tags:
      - Group Products
      summary: Create a new group product for customers only
      security:
        - JWTAuth: []
      parameters:
        - $ref: '#/components/parameters/idProducts'
      responses:
        '200':
          $ref: '#/components/responses/createGroupProductSuccess'
        '400':
          $ref: '#/components/responses/createGroupProductFailed'
####################################
#  ORDERS
####################################
  /jwt/orders/{id_group}:
    post:
      tags:
      - Orders
      summary: Create a new order
      parameters:
        - $ref: '#/components/parameters/idGroup'
      security:
        - JWTAuth: []
      requestBody:
        $ref: '#/components/requestBodies/requestBodyOrder'
      responses:
        '200':
          $ref: '#/components/responses/createOrderSuccess'
        '400':
          $ref: '#/components/responses/createOrderFailed'
  /jwt/orders/id/{id_order}:
    get:
      tags:
        - Orders
      summary: Get order by id_order
      parameters:
        - $ref: '#/components/parameters/idOrder'
      security:
        - JWTAuth: []
      responses:
        '200':
          $ref: '#/components/responses/getOrderSuccess'
        '400':
          $ref: '#/components/responses/OrderResponseFailed'
  /jwt/orders/group/{id_group}:
    get:
      tags:
        - Orders
      summary: Get all order by id_group
      parameters:
        - $ref: '#/components/parameters/idGroup'
      security:
        - JWTAuth: []
      responses:
        '200':
          $ref: '#/components/responses/getAllOrdersSuccess'
        '400':
          $ref: '#/components/responses/OrderResponseFailed'
  /jwt/orders/users/{id_user}:
    get:
      tags:
      - Orders
      summary: Get all orders by user's id
      parameters:
        - $ref: '#/components/parameters/idUser'
      security:
        - JWTAuth: []
      responses:
        '200':
          $ref: '#/components/responses/getAllOrdersSuccess'
        '400':
          $ref: '#/components/responses/OrderResponseFailed'
  /jwt/orders/update/{id_order}:
    put:
      tags:
        - Orders
      summary: Update order by id_order
      security:
        - JWTAuth: []
      parameters:
        - $ref: '#/components/parameters/idOrder'
      requestBody:
        $ref: '#/components/requestBodies/requestBodyOrderUpdate'
      responses:
        '200':
          $ref: '#/components/responses/getOrderSuccess'
        '400':
          $ref: '#/components/responses/OrderResponseFailed'
####################################
#  COMPONENTS
####################################
components:
  schemas:
    requestDataLogin:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    requestDataUser:
      type: object
      required:
        - name
        - email
        - password
        - phone
      properties:
        name:
          type: string
          minLength: 1
          pattern: '^0-9A-Za-z_.$'
        email:
          type: string
          format: email
          minLength: 5
          description: inputted email must be unique
        password:
          type: string
          minLength: 6
        phone:
          type: string
          format: e164
          minLength: 8
          maxLength: 16
          description: inputted phone number must be unique
    requestDataProduct:
      type: object
      required:
        - name_product
        - detail_product
        - price
        - limit
        - photo
      properties:
        name_product:
          type: string
          description: "minLength: 1"
        detail_product:
          type: string
          description: "minLength: 1"
        price:
          type: integer
          description: "minimum value: 1"
        limit:
          type: integer
          description: "minimum value: 1"
        photo:
          type: string
          format: binary
          description: "allowed file extension: jpg, png, jpeg && size <= 1050000 byte"
    requestDataProductUpdate:
      type: object
      required:
        - name_product
        - detail_product
        - price
        - limit
      properties:
        name_product:
          type: string
          description: "minLength: 1"
        detail_product:
          type: string
          description: "minLength: 1"
        price:
          type: integer
          description: "minimum value: 1"
        limit:
          type: integer
          description: "minimum value: 1"
        photo:
          type: string
          format: binary
          description: "allowed file extension: jpg, png, jpeg && size <= 1050000 byte"
    requestDataOrder:
      type: object
      properties:
        credit_card:
          type: object
          properties:
            typ:
              type: string
            name:
              type: string
            number:
              type: string
            cvv:
              type: integer
            month:
              type: integer
            year:
              type: integer
    requestDataOrderUpdate:
      type: object
      properties:
        detail:
          type: string
    responseLoginWithData:
      type: object
      properties:
        Code:
          type: integer
        Data:
          type: object
          properties:
            ID:
              type: integer
            Name:
              type: string
            Token:
              type: string
            Role: 
              type: string
        Message:
          type: string
    responseUserWithData:
      type: object
      properties:
        Code:
          type: integer
        Data:
          type: object
          properties:
            ID:
              type: integer
            Name:
              type: string
            Email:
              type: string
            Phone:
              type: string
        Message:
          type: string
    responseUserWithDataArray:
      type: object
      properties:
        Code:
          type: integer 
        Data:
          type: array
          items:
            type: object
            properties:
              ID:
                type: integer
              Name:
                type: string
              Email:
                type: string
              Phone:
                type: string
        Message:
          type: string    
    responseProductWithData:
      type: object
      properties:
        Code:
          type: integer
        Data:
          type: object
          properties:
            ID:
              type: integer
            Name_Product:
              type: string
            Detail_Product:
              type: string
            Price:
              type: integer
            Limit:
              type: integer
            Photo:
              type: string
              format: binary
            Url: 
              type: string
        Message:
          type: string      
    responseProductWithDataArray:
      type: object
      properties:
        Code:
          type: integer
        Data:
          type: array
          items:
            type: object
            properties:
              ID:
                type: integer
              Name_Product:
                type: string
              Detail_Product:
                type: string
              Price:
                type: integer
              Limit:
                type: integer
              Photo:
                type: string
                format: binary
              Url: 
                type: string
        Message:
          type: string
    responseGroupProductWithData:
      type: object
      properties:
        Code:
          type: integer
        Data:
          type: object
          properties:
            ID:
              type: integer
            ProductsID:
              type: integer
            NameGroupProduct:
              type: string
            Limit:
              type: integer
            CapacityGroupProduct:
              type: integer
            Price:
              type: integer
            AdminFee:
              type: integer
            TotalPrice:
              type: integer 
            DurationGroup:
              type: string
            Name_Product: 
              type: string
            Status: 
              type: string
            Url:
              type: string
            GetOrder: 
              type: array
              items:
                type: object
                properties:
                  UsersID:
                    type: integer
                  GroupProductID:
                    type: integer
                  Name:
                    type: string
        Message:
          type: string
    responseGroupProductWithDataArray:
        type: object
        properties:
          Code:
            type: integer
          Data:
            type: array
            items:
              type: object
              properties:
                ID:
                  type: integer
                ProductsID:
                  type: integer
                NameGroupProduct:
                  type: string
                Limit:
                  type: integer
                CapacityGroupProduct:
                  type: integer
                Price:
                  type: integer
                AdminFee:
                  type: integer
                TotalPrice:
                  type: integer 
                DurationGroup:
                  type: string
                Name_Product: 
                  type: string
                Status: 
                  type: string
                Url:
                  type: string
                GetOrder: 
                  type: array
                  nullable: true
                  items:
                    type: object
                    properties:
                      UsersID:
                        type: integer
                      GroupProductID:
                        type: integer
                      Name:
                        type: string
          Message:
            type: string  
    responseCreateGroupProductWithData:
      type: object
      properties:
        Code:
          type: integer
        Data:
          type: object
          properties:
            GroupProductID:
              type: integer
        Message:
          type: string
    responseCreateOrderWithData:
      type: object
      properties:
        Code:
          type: integer
        Data:
          type: object
          properties:
            OrderID:
              type: integer
        Message:
          type: string
    responseOrderWithData:
      type: object
      properties:
        Code:
          type: integer
        Data:
          type: object
          properties:
            UsersID:
              type: integer
            GroupProductID:
              type: integer
            NameProduct:
              type: string
            PriceOrder:
              type: integer
            DetailCredential:
              type: string
        Message:
          type: string
    responseOrderWithDataArray:
      type: object
      properties:
        Code:
          type: integer
        Data:
          type: array 
          items:
            type: object
            properties:
              UsersID:
                type: integer
              GroupProductID:
                type: integer
              NameProduct:
                type: string
              PriceOrder:
                type: integer
              DetailCredential:
                type: string
        Message:
          type: string
    responseNonData: 
      type: object
      properties:
        Code:
          type: integer
        Message:
          type: string 
  parameters:
    idGroup:
      name: id_group
      in: path
      required: true
      schema:
        type: integer
        example: 1
    idOrder:
      name: id_order
      in: path
      required: true
      schema:
        type: integer
        example: 1
    idParam:
      name: id
      in: path
      required: true
      schema:
        type: integer
        example: 1
    idProducts:
      name: id_products
      in: path
      required: true
      schema:
        type: integer
        example: 1
    idUser:
      name: id_user
      in: path
      required: true
      schema:
        type: integer
        example: 1
    statusParam:
      name: status
      in: path
      required: true
      schema:
        type: string
        example: available
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "use Token"  
  requestBodies:
    requestBodyLogin:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/requestDataLogin'
          examples:
            Admin:
              value:
                email: admin@admin.com
                password: admin123
            Customer:
              value:
                email: perospero@mail.com
                password: qwerty
        multipart/form-data:
          schema:
            $ref: '#/components/schemas/requestDataLogin'        
    requestBodyUser:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/requestDataUser'
          examples:
            newUser1:
              value:
                name: NurilHuda
                email: nurilhuda7337@gmail.com
                password: qwerty
                phone: "+6281234567890"
            newUser2:
              value:
                name: sup.sup77
                email: s@g.s
                password: asd!@#12
                phone: "+6771234"
            newUser3:
              value:
                name: sahril_mhdra
                email: sahril88@yahoo.co.id
                password: test123
                phone: "+628999999999999"
        multipart/form-data:
          schema:
            $ref: '#/components/schemas/requestDataUser'
    requestBodyUserUpdate:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/requestDataUser'
          examples:
            newData1:
              value:
                name: SupriadiBaru
                email: new.s@yahoo.co.id
                password: newpass
                phone: "+628966066096"
        multipart/form-data:
          schema:
            $ref: '#/components/schemas/requestDataUser'
    requestBodyProduct:
      required: true
      content:
        multipart/form-data:
          schema:
            $ref: '#/components/schemas/requestDataProduct'
    requestBodyProductUpdate:
      required: true
      content:
        multipart/form-data:
          schema:
            $ref: '#/components/schemas/requestDataProductUpdate'
    requestBodyOrder: 
      required: true
      content:
        application/json:
          schema:  
            $ref: '#/components/schemas/requestDataOrder'
          example:
            credit_card:
              typ: Visa
              name: Supriadi
              number: 1234-1234-1234-1234
              cvv: 234
              month: 12
              year: 21
    requestBodyOrderUpdate: 
      required: true
      content:
        application/json:
          schema:  
            $ref: '#/components/schemas/requestDataOrderUpdate'
          example:
            detail: "email: subs.netflix@mail.com, password: qwertyui"
  responses:
    loginSuccess:
      description: Success Response Data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseLoginWithData'
          examples:
            Admin:
              value:
                Code: 200
                Data: {
                  ID: 4,
                  Name: admin,
                  Token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJleHAiOjE2Mzk2OTAwMjMsInJvbGUiOiJhZG1pbiIsInVzZXJJZCI6NH0.1Ij1ZVqpqPDOVXzaXyqcyNMlnbLTfwD28Byv0aWNjAQ,
                  Role: admin
                }
                Message: Login Success
            Customer:
              value:
                Code: 200
                Data: {
                  ID: 150,
                  Name: perospero,
                  Token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJleHAiOjE2Mzk2OTAxOTgsInJvbGUiOiJjdXN0b21lciIsInVzZXJJZCI6MTUwfQ.SJfS9BOfxJdNXzrRSTlRUXGItxQuUlMarALMD37Ronc,
                  Role: customer
                }
                Message: Login Success
    loginFailed:
      description: Bad Request Response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseNonData'
          example:
            Code: 400 
            Message: Email or Password Incorrect
    successOperationNonData:
      description: Success Response Non Data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseNonData'
          example:
            Code: 200
            Message: Success Operation
    createUserFailed:
      description: Bad Request Response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseNonData'
          examples:
            Invalid Name:
              $ref: '#/components/examples/invalidName'
            Name alphanumeric:
              $ref: '#/components/examples/nameAlphanumeric'
            Invalid Email:
              $ref: '#/components/examples/invalidEmail'
            Invalid Password:
              $ref: '#/components/examples/invalidPassword'
            Password Must Consist Of:
              $ref: '#/components/examples/passwordMustConsistOf'
            Invalid Telephone Number:
              $ref: '#/components/examples/invalidTelephoneNumber'
            Email or Telephone Number Already Exist:
              $ref: '#/components/examples/emailOrTelephoneNumberAlreadyExist'
    getAllUsersSuccess:
      description: Success Response Data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseUserWithDataArray'
          example:
            Code: 200
            Data: [
              {
                ID: 1,
                Name: try,
                Email: try@example.com,
                Phone: "+6281111222333"
              },
              {
                ID: 2,
                Name: test123,
                Email: test123@example.com,
                Phone: "+6281444555666"
              },
              {
                ID: 3,
                Name: coba123,
                Email: coba123@example.com,
                Phone: "+6281777777777"
              }
            ]
            Message: Success Operation
    getAllDataFailed:
      description: Bad Request Response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseNonData'
          examples:
            Data Not Found:
              $ref: '#/components/examples/dataNotFound'
            Bad Request:
              $ref: '#/components/examples/badRequest'
    getUserSuccess:
      description: Success Response Data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseUserWithData'
          example:
            Code: 200
            Data: {
              ID: 1,
              Name: try,
              Email: try@example.com,
              Phone: "+6281111222333"  
            }
            Message: Success Operation
    getDataByIdFailed:
      description: Bad Request Response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseNonData'
          examples:
            Invalid Id:
              $ref: '#/components/examples/invalidId'
            Data Not Found:
              $ref: '#/components/examples/dataNotFound'
            Bad Request:
              $ref: '#/components/examples/badRequest'
    updateUserFailed:
      description: Bad Request Response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseNonData'
          examples:
            Invalid Id:
              $ref: '#/components/examples/invalidId'
            Data Not Found:
              $ref: '#/components/examples/dataNotFound'
            Access Forbidden:
                $ref: '#/components/examples/accessForbidden'
            Invalid Name:
              $ref: '#/components/examples/invalidName'
            Invalid Email:
              $ref: '#/components/examples/invalidEmail'
            Invalid Password:
              $ref: '#/components/examples/invalidPassword'
            Password Must Consist Of:
              $ref: '#/components/examples/passwordMustConsistOf'
            Invalid Telephone Number:
              $ref: '#/components/examples/invalidTelephoneNumber'
            Email or Telephone Number Already Exist:
              $ref: '#/components/examples/emailOrTelephoneNumberAlreadyExist'
    deleteDataByIdFailed:
      description: Bad Request Response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseNonData'
          examples:
            Invalid Id:
              $ref: '#/components/examples/invalidId'
            Data Not Found:
              $ref: '#/components/examples/dataNotFound'
            Access Forbidden:
                $ref: '#/components/examples/accessForbidden'
    createProductFailed:
      description: Bad Request Response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseNonData'
          examples:
            File Extension Not Allowed:
              $ref: '#/components/examples/fileExtensionNotAllowed'
            Illegal File:
              $ref: '#/components/examples/illegalFile'
            Size File Too Big:
              $ref: '#/components/examples/sizeFileTooBig'
            Access Forbidden: 
              $ref: '#/components/examples/accessForbidden'
            Bad Request:
              $ref: '#/components/examples/badRequest'
    productServerFailed:
      description: Internal Server Error Response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseNonData'
          examples:
            Can't Connect to Server:
              $ref: '#/components/examples/cantConnecttoServer'
            Failed to Upload File:
              $ref: '#/components/examples/failedtoUploadFile'
    getAllProductsSuccess:
      description: Success Response Data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseProductWithDataArray'
          example:
            Code: 200
            Data: [
              { 
                ID: 3,
                NameProduct: Youtube-Music,
                DetailProduct: Lorem,
                Price: 300000,
                Limit: 6,
                Photo: Youtube-Music-2021-12-13T10:06:45.jpg,
                Url: https://storage.googleapis.com/barengin-bucket/Youtube-Music-2021-12-13T10:06:45.jpg
              },
              { 
                ID: 4,
                NameProduct: Youtube Premium,
                DetailProduct: Berlangganan 1 bulan,
                Price: 200000,
                Limit: 4,
                Photo: Youtube-Premium-2021-12-14T09:34:47.png,
                Url: https://storage.googleapis.com/barengin-bucket/Youtube-Premium-2021-12-14T09:34:47.png
              }
            ]
            Message: Success Operation
    getProductSuccess:
      description: Success Response Data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseProductWithData'
          example:
            Code: 200
            Data: { 
              ID: 3,
                NameProduct: Youtube-Music,
                DetailProduct: Lorem,
                Price: 300000,
                Limit: 6,
                Photo: Youtube-Music-2021-12-13T10:06:45.jpg,
                Url: https://storage.googleapis.com/barengin-bucket/Youtube-Music-2021-12-13T10:06:45.jpg
            }
            Message: Success Operation
    updateProductFailed:
      description: Bad Request Response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseNonData'
          examples:
            Invalid Id:
              $ref: '#/components/examples/invalidId'
            Data Not Found:
              $ref: '#/components/examples/dataNotFound'
            Access Forbidden:
              $ref: '#/components/examples/accessForbidden'
            Bad Request:
              $ref: '#/components/examples/badRequest'
            File Extension Not Allowed:
              $ref: '#/components/examples/fileExtensionNotAllowed'
            Illegal File:
              $ref: '#/components/examples/illegalFile'
            Size File Too Big:
              $ref: '#/components/examples/sizeFileTooBig'
    createGroupProductSuccess:
      description: Success Operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseCreateGroupProductWithData'
          example:
            Code: 200
            Data: { 
              GroupProductID: 1,
            }
            Message: Success Operation
    createGroupProductFailed:
      description: Bad Request Response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseNonData'
          examples:
            Invalid Param:
              $ref: '#/components/examples/invalidParam'
            Access Forbidden:
              $ref: '#/components/examples/accessForbidden'
            Bad Request:
              $ref: '#/components/examples/badRequest'
            Id Product Not Found: 
              $ref: '#/components/examples/idProductNotFound'
    getAllGroupProductsSuccess:
      description: Success Response Data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseGroupProductWithDataArray'
          example:
            Code: 200
            Data: [
              { 
                ID: 1,
                ProducstID: 3, 
                NameGroupProduct: Youtube-Music-1,
                Limit: 6,
                CapacityGroupProduct: 2,
                Price: 300000,
                AdminFee: 5000,
                TotalPrice: 305000,
                DurationGroup: 12-26-2021,
                Name_Product: Youtube-Music,
                Status: Available,
                Url: https://storage.googleapis.com/barengin-bucket/Youtube-Music-2021-12-13T10:06:45.jpg,
                GetOrder: [
                  {
                    UsersID: 79,
                    GroupProductID: 1,
                    Name: nuril
                  }
                ]
              },
              { 
                ID: 2,
                ProducstID: 3, 
                NameGroupProduct: Youtube-Music-2,
                Limit: 6,
                CapacityGroupProduct: 1,
                Price: 300000,
                AdminFee: 5000,
                TotalPrice: 305000,
                DurationGroup: 12-26-2021,
                Name_Product: Youtube-Music,
                Status: Available,
                Url: https://storage.googleapis.com/barengin-bucket/Youtube-Music-2021-12-13T10:06:45.jpg,
                GetOrder: null
              }
            ]
            Message: Success Operation
    getGroupProductSuccess:
      description: Success Response Data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseGroupProductWithData'
          example:
            Code: 200
            Data: { 
                ID: 1,
                ProducstID: 3, 
                NameGroupProduct: Youtube-Music-1,
                Limit: 6,
                CapacityGroupProduct: 1,
                Price: 300000,
                AdminFee: 5000,
                TotalPrice: 305000,
                DurationGroup: 12-26-2021,
                Name_Product: Youtube-Music,
                Status: Available,
                Url: https://storage.googleapis.com/barengin-bucket/Youtube-Music-2021-12-13T10:06:45.jpg,
                GetOrder: [
                  {
                    UsersID: 79,
                    GroupProductID: 1,
                    Name: nuril
                  }
                ]
              }
            Message: Success Operation
    getAllGroupProductsAvailableFailed:
      description: Bad Request Response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseNonData'
          examples:
            Invalid Param:
              $ref: '#/components/examples/invalidParam'
            Data Not Found:
              $ref: '#/components/examples/dataNotFound'
            Bad Request:
              $ref: '#/components/examples/badRequest'
    createOrderSuccess:
      description: Success Operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseCreateOrderWithData'
          example:
            Code: 200
            Message: Success Operation
            Data: { 
              OrderID: 1,
            }
    createOrderFailed:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseNonData'
          examples:
            Invalid Param:
              $ref: '#/components/examples/invalidParam'
            Access Forbidden:
              $ref: '#/components/examples/accessForbidden'
            Group Product Full:
              $ref: '#/components/examples/groupProductFull'
            Bad Request:
              $ref: '#/components/examples/badRequest'
            Id Group Product Not Found:
              $ref: '#/components/examples/idGroupProductNotFound'
    getOrderSuccess:
      description: Success Operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseOrderWithData'
          example:
            Code: 200
            Data: {
              UsersID: 7,
              GroupProductID: 8,
              NameProduct: Spotify,
              PriceOrder: 50833,
              DetailCredential: "email: subs.spotify@mail.com, password: spotify123"
            }
            Message: Success Operation
    OrderResponseFailed:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseNonData'
          examples:
            Invalid Id:
              $ref: '#/components/examples/invalidId'
            Data Not Found:
              $ref: '#/components/examples/dataNotFound'
            Access Forbidden:
              $ref: '#/components/examples/dataNotFound'
            Bad Request:
              $ref: '#/components/examples/badRequest'
    getAllOrdersSuccess:
      description: Success Operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseOrderWithDataArray'
          example:
            Code: 200
            Message: Success Operation
            Data: [
              {
                ID: 1,
                UsersID: 79,
                GroupProductID: 1,
                NameProduct: Youtube-Music,
                PriceOrder: 50833,
                Credential: "email: subs.spotify@mail.com, password: spotify123"
              },
              {
                ID: 2,
                UsersID: 79,
                GroupProductID: 1,
                NameProduct: Youtube-Music,
                PriceOrder: 50833,
                Credential: "email: subs.netflix@mail.com, password: netflix123"
              }            
            ]
  examples:
    accessForbidden:
      value:
        Code: 400
        Message: Access Forbidden                
    badRequest:
      value:
        Code: 400
        Message: Bad Request
    cantConnecttoServer:
      value:
        Code: 500
        Message: Can't Connect to server
    dataisAvailable:
      value:
        Code: 400
        Message: Data is Available
    dataNotFound:
      value:
        Code: 400
        Message: Data Not Found
    emailOrTelephoneNumberAlreadyExist:
      value: 
        Code: 400
        Message: Email or Telephone Number Already Exist
    failedtoUploadFile:
      value:
        Code: 500
        Message: Failed to Upload File
    fileExtensionNotAllowed:
      value:
        Code: 400
        Message: File Extension Not Allowed
    groupProductFull:
      value:
        Code: 400
        Message: Group Product Full
    idGroupProductNotFound:
      value:
        Code: 400
        Message: Id Group Product Not Found
    idProductNotFound:
      value:
        Code: 400
        Message: Id Product Not Found
    illegalFile:
      value:
        Code: 400
        Message: Illegal File
    invalidEmail:
      value:
        Code: 400
        Message: Invalid Email
    invalidId:
      value:
        Code: 400
        Message: Invalid Id
    invalidName:
      value:
        Code: 400
        Message: Invalid Name
    invalidParam:
      value:
        Code: 400
        Message: Invalid Param
    invalidPassword:
      value:
        Code: 400
        Message: Invalid Password
    invalidTelephoneNumber:
      value:
        Code: 400
        Message: Invalid Telephone Number
    nameAlphanumeric:
      value:
        Code: 400
        Message: Name can only contains alphanumeric
    notAvailable:
      value:
        Code: 400
        Message: Not Available
    passwordMustConsistOf:
      value:
        Code: 400
        Message: Password must consist of 6 characters or more
    sizeFileTooBig:
      value:
        Code: 400
        Message: Size File Too Big
    